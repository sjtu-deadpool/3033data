# -*- coding: utf-8 -*-
"""data_digestion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k6wizFEQImYkgRu7Vbr53s86pq7G7IUo
"""

!pip install cinemagoer
!pip install selenium
!pip install undetected_chromedriver
!pip install serpapi

"""
IMDb + TMDB Movie Data Integration Tool
Fetch detailed movie information using a predefined list of IMDb IDs and combine it with TMDB data to build a comprehensive dataset.
Downloads one IMDb poster and up to six TMDB backdrops per movie.
Includes duplicate-checking to avoid reprocessing the same movie.
"""

import requests
import pandas as pd
import os
import time
import json
import traceback
from imdb import Cinemagoer
from PIL import Image
from io import BytesIO
from tqdm import tqdm

# TMDB API key
TMDB_API_KEY = "6ba3eb883961b80c06d196906b976afe"

# Predefined list of IMDb Top movie IDs (without 'tt' prefix)
TOP_MOVIE_IDS = [
    # 1-25
    "0111161",  # 1. The Shawshank Redemption
    "0068646",  # 2. The Godfather
    "0071562",  # 3. The Godfather: Part II
    "0468569",  # 4. The Dark Knight
    "0050083",  # 5. 12 Angry Men
    "0108052",  # 6. Schindler's List
    "0167260",  # 7. The Lord of the Rings: The Return of the King
    "0110912",  # 8. Pulp Fiction
    "0060196",  # 9. The Good, the Bad and the Ugly
    "0120737",  # 10. The Lord of the Rings: The Fellowship of the Ring
    "0137523",  # 11. Fight Club
    "0109830",  # 12. Forrest Gump
    "1375666",  # 13. Inception
    "0080684",  # 14. Star Wars: Episode V - The Empire Strikes Back
    "0167261",  # 15. The Lord of the Rings: The Two Towers
    "0073486",  # 16. One Flew Over the Cuckoo's Nest
    "0099685",  # 17. Goodfellas
    "0133093",  # 18. The Matrix
    "0047478",  # 19. Seven Samurai
    "0114369",  # 20. Se7en
    "0317248",  # 21. City of God
    "0076759",  # 22. Star Wars: Episode IV - A New Hope
    "0102926",  # 23. The Silence of the Lambs
    "0038650",  # 24. It's a Wonderful Life
    "0118799",  # 25. Life Is Beautiful

    # 26-50
    "0120815",  # 26. Saving Private Ryan
    "0816692",  # 27. Interstellar
    "0120689",  # 28. The Green Mile
    "0103064",  # 29. Terminator 2: Judgment Day
    "0088763",  # 30. Back to the Future
    "0245429",  # 31. Spirited Away
    "0054215",  # 32. Psycho
    "0110357",  # 33. The Lion King
    "0110413",  # 34. Léon: The Professional
    "0172495",  # 35. Gladiator
    "0407887",  # 36. The Departed
    "0482571",  # 37. The Prestige
    "0253474",  # 38. The Pianist
    "2582802",  # 39. Whiplash
    "0095327",  # 40. Grave of the Fireflies
    "0095765",  # 41. Cinema Paradiso
    "0047396",  # 42. Rear Window
    "0078748",  # 43. Alien
    "0078788",  # 44. Apocalypse Now
    "0209144",  # 45. Memento
    "0082971",  # 46. Raiders of the Lost Ark
    "0032553",  # 47. The Great Dictator
    "1853728",  # 48. Django Unchained
    "0405094",  # 49. The Lives of Others
    "0043014",  # 50. Sunset Boulevard

    # 51-100
    "0027977",  # 51. Modern Times
    "0910970",  # 52. WALL·E
    "0081505",  # 53. The Shining
    "0043014",  # 54. Sunset Blvd.
    "0057012",  # 55. Dr. Strangelove
    "0052357",  # 56. Vertigo
    "0034583",  # 57. Casablanca
    "0169547",  # 58. American Beauty
    "0090605",  # 59. Aliens
    "0033467",  # 60. Citizen Kane
    "0087843",  # 61. Once Upon a Time in America
    "0082096",  # 62. Das Boot
    "0112573",  # 63. Braveheart
    "0056172",  # 64. Lawrence of Arabia
    "1745960",  # 65. Top Gun: Maverick
    "0180093",  # 66. Requiem for a Dream
    "0022100",  # 67. M
    "0986264",  # 68. Taare Zameen Par
    "0338013",  # 69. Eternal Sunshine of the Spotless Mind
    "8579674",  # 70. 1917
    "0119698",  # 71. Princess Mononoke
    "0086190",  # 72. Star Wars: Episode VI - Return of the Jedi
    "8267604",  # 73. Capernaum
    "0062622",  # 74. 2001: A Space Odyssey
    "0361748",  # 75. Inglourious Basterds
    "0059578",  # 76. The Good, the Bad and the Ugly
    "0052311",  # 77. 12 Angry Men (TV)
    "0053125",  # 78. North by Northwest
    "0066921",  # 79. A Clockwork Orange
    "0093058",  # 80. Full Metal Jacket
    "0036775",  # 81. Double Indemnity
    "0075314",  # 82. Taxi Driver
    "0045152",  # 83. Singin' in the Rain
    "0070735",  # 84. The Sting
    "0056592",  # 85. To Kill a Mockingbird
    "0040522",  # 86. Bicycle Thieves
    "0208092",  # 87. Snatch
    "0086879",  # 88. Amadeus
    "0211915",  # 89. Amélie
    "0114709",  # 90. Toy Story
    "0056217",  # 91. The Great Escape
    "0435761",  # 92. Toy Story 3
    "0110413",  # 93. Léon: The Professional
    "0119217",  # 94. Good Will Hunting
    "0110357",  # 95. The Lion King
    "0097165",  # 96. Dead Poets Society
    "0113277",  # 97. Heat
    "0064116",  # 98. Once Upon a Time in the West
    "0047296",  # 99. On the Waterfront
    "0105236",  # 100. Reservoir Dogs

    "0120586",  # 101. American History X
    "0103064",  # 102. Terminator 2: Judgment Day
    "0095765",  # 103. Cinema Paradiso
    "0367110",  # 104. Oldboy
    "0042876",  # 105. Rashomon
    "1305806",  # 106. The Secret in Their Eyes
    "0372784",  # 107. Batman Begins
    "0469494",  # 108. There Will Be Blood
    "0055630",  # 109. Yojimbo
    "0040897",  # 110. The Treasure of the Sierra Madre
    "0012349",  # 111. The Kid
    "0114814",  # 112. The Usual Suspects
    "0053291",  # 113. Some Like It Hot
    "0457430",  # 114. Pan's Labyrinth
    "0363163",  # 115. Downfall
    "0089881",  # 116. Come and See
    "0042192",  # 117. All About Eve
    "1392214",  # 118. Prisoners
    "0044741",  # 119. Ikiru
    "0117951",  # 120. Trainspotting
    "0057115",  # 121. The Great Escape
    "0071315",  # 122. Chinatown
    "0057565",  # 123. High and Low
    "0118715",  # 124. The Big Lebowski
    "1832382",  # 125. A Separation
    "0354407",  # 126. The Pianist
    "1049413",  # 127. Up
    "0095016",  # 128. Die Hard
    "0015864",  # 129. The Gold Rush
    "0119488",  # 130. L.A. Confidential
    "0017925",  # 131. The General
    "0050976",  # 132. The Seventh Seal
    "0050986",  # 133. Wild Strawberries
    "1877830",  # 134. X-Men: Days of Future Past
    "0347149",  # 135. Howl's Moving Castle
    "0080678",  # 136. The Elephant Man
    "0116282",  # 137. Fargo
    "0096283",  # 138. My Neighbor Totoro
    "0055031",  # 139. Judgment at Nuremberg
    "0268978",  # 140. A Beautiful Mind
    "0266543",  # 141. Finding Nemo
    "1205489",  # 142. Gran Torino
    "0477348",  # 143. No Country for Old Men
    "0118849",  # 144. Children of Heaven
    "0266697",  # 145. Kill Bill: Vol. 1
    "0091763",  # 146. Platoon
    "0084787",  # 147. The Thing
    "0046912",  # 148. Dial M for Murder
    "1130884",  # 149. Shutter Island
    "0074896",  # 150. The Message

    "0029583",  # 151. Snow White and the Seven Dwarfs
    "0032976",  # 152. Rebecca
    "0031679",  # 153. Mr. Smith Goes to Washington
    "0079944",  # 154. Stalker
    "0107290",  # 155. Jurassic Park
    "0046268",  # 156. The Wages of Fear
    "0053198",  # 157. Ben-Hur
    "0120735",  # 158. Lock, Stock and Two Smoking Barrels
    "0245429",  # 159. Spirited Away
    "0059742",  # 160. The Sound of Music
    "0061512",  # 161. Cool Hand Luke
    "0116231",  # 162. The Bandit
    "0051201",  # 163. Witness for the Prosecution
    "0978762",  # 164. Mary and Max
    "0083658",  # 165. Blade Runner
    "1895587",  # 166. Spotlight
    "0017136",  # 167. Metropolis
    "0347149",  # 168. Howl's Moving Castle
    "0050212",  # 169. Paths of Glory
    "0116282",  # 170. Fargo
    "0088247",  # 171. The Terminator
    "0015324",  # 172. Sherlock Jr.
    "0050825",  # 173. Nights of Cabiria
    "0198781",  # 174. Monsters, Inc.
    "1979320",  # 175. Rush
    "0112641",  # 176. Casino
    "0077416",  # 177. The Deer Hunter
    "0892769",  # 178. How to Train Your Dragon
    "0167404",  # 179. The Sixth Sense
    "0041959",  # 180. The Third Man
    "0046911",  # 181. Rear Window
    "1454029",  # 182. The Help
    "0015324",  # 183. Sherlock Jr.
    "0031381",  # 184. Gone with the Wind
    "0097576",  # 185. Indiana Jones and the Last Crusade
    "0080684",  # 186. Star Wars: Episode V - The Empire Strikes Back
    "0993846",  # 187. The Wolf of Wall Street
    "0050613",  # 188. The Bridge on the River Kwai
    "0092005",  # 189. Stand by Me
    "0111161",  # 190. The Shawshank Redemption
    "0758758",  # 191. Into the Wild
    "0060107",  # 192. Andrei Rublev
    "0107207",  # 193. In the Name of the Father
    "0046438",  # 194. Tokyo Story
    "0056801",  # 195. 8½
    "0113247",  # 196. La Haine
    "4430212",  # 197. Drishyam
    "0055630",  # 198. Yojimbo
    "0089881",  # 199. Come and See
    "0075148",  # 200. Rocky

    "0052618",  # 201. Ben-Hur
    "0405159",  # 202. Million Dollar Baby
    "0032551",  # 203. The Grapes of Wrath
    "0079470",  # 204. Monty Python's Life of Brian
    "0046250",  # 205. Roman Holiday
    "0048473",  # 206. Rififi
    "0071411",  # 207. Dersu Uzala
    "0036868",  # 208. The Best Years of Our Lives
    "0053291",  # 209. Some Like It Hot
    "2278388",  # 210. The Grand Budapest Hotel
    "0015864",  # 211. The Gold Rush
    "0382932",  # 212. Ratatouille
    "0246578",  # 213. Donnie Darko
    "0056801",  # 214. 8½
    "0440963",  # 215. The Bourne Ultimatum
    "0118694",  # 216. In the Mood for Love
    "0119217",  # 217. Good Will Hunting
    "0105695",  # 218. Unforgiven
    "0942385",  # 219. Tropic Thunder
    "0796366",  # 220. Star Trek
    "0075148",  # 221. Rocky
    "0401792",  # 222. Sin City
    "0112471",  # 223. Before Sunrise
    "0032138",  # 224. The Wizard of Oz
    "0542337",  # 225. Million Dollar Baby
    "0053198",  # 226. Ben-Hur
    "0044079",  # 227. Strangers on a Train
    "0070511",  # 228. Papillon
    "0070047",  # 229. The Exorcist
    "0087544",  # 230. Nausicaä of the Valley of the Wind
    "0012349",  # 231. The Kid
    "0062136",  # 232. The Graduate
    "0353969",  # 233. Memories of Murder
    "0019254",  # 234. The Passion of Joan of Arc
    "0325980",  # 235. Pirates of the Caribbean: The Curse of the Black Pearl
    "0097223",  # 236. Grave of the Fireflies
    "0061184",  # 237. Who's Afraid of Virginia Woolf?
    "0107048",  # 238. Groundhog Day
    "0059742",  # 239. The Sound of Music
    "0046912",  # 240. Dial M for Murder
    "0031679",  # 241. Mr. Smith Goes to Washington
    "0021749",  # 242. City Lights
    "5074352",  # 243. Dangal
    "0019254",  # 244. The Passion of Joan of Arc
    "0033870",  # 245. The Magnificent Ambersons
    "5027774",  # 246. Three Billboards Outside Ebbing, Missouri
    "0050212",  # 247. Paths of Glory
    "0017925",  # 248. The General
    "4016934",  # 249. The Handmaiden
    "0052311",  # 250. Twelve Angry Men
]

print("Initializing Cinemagoer...")
ia = Cinemagoer()

PROCESSED_MOVIE_IDS = set()
PROCESS_RECORD_FILE = "processed_movies.json"


def load_processed_records():
    global PROCESSED_MOVIE_IDS
    if os.path.exists(PROCESS_RECORD_FILE):
        try:
            with open(PROCESS_RECORD_FILE, 'r', encoding='utf-8') as f:
                records = json.load(f)
                PROCESSED_MOVIE_IDS = set(records.get("processed_ids", []))
            print(f"Loaded {len(PROCESSED_MOVIE_IDS)} processed movie IDs")
        except Exception as e:
            print(f"Error loading processed records: {e}")


def save_processed_records():
    try:
        records = {
            "processed_ids": list(PROCESSED_MOVIE_IDS),
            "last_updated": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        with open(PROCESS_RECORD_FILE, 'w', encoding='utf-8') as f:
            json.dump(records, f, ensure_ascii=False, indent=2)
        print(f"Updated processed records: {len(PROCESSED_MOVIE_IDS)} IDs saved")
    except Exception as e:
        print(f"Error saving processed records: {e}")


def get_movie_details(movie_id=None, movie_name=None):
    if not movie_id and not movie_name:
        raise ValueError("You must provide a movie ID or movie name.")
    if movie_name and not movie_id:
        search_results = ia.search_movie(movie_name)
        if not search_results:
            print(f"No movie found with name '{movie_name}'")
            return None
        movie_id = search_results[0].movieID
        print(f"Found movie: {search_results[0]['title']} (ID: {movie_id})")
    print(f"Fetching details for movie ID {movie_id}...")
    movie = ia.get_movie(movie_id)
    ia.update(movie, info=['main', 'plot', 'taglines', 'keywords', 'vote details',
                            'critic reviews', 'trivia', 'alternate versions',
                            'goofs', 'quotes', 'release dates', 'official sites',
                            'soundtrack', 'locations', 'technical'])
    print(f"Successfully fetched details for '{movie.get('title')}'")
    return movie


def extract_imdb_features(movie, rank):
    features = {
        "Rank": rank,
        "Title": movie.get('title', ''),
        "Year": movie.get('year', ''),
        "IMDb_ID": movie.get('imdbID', ''),
        "Rating": movie.get('rating', ''),
        "Votes": movie.get('votes', ''),
        "Top_250_Rank": movie.get('top 250 rank', rank),
        "Genres": '|'.join(movie.get('genres', [])),
        "Kind": movie.get('kind', ''),
        "Certificates": '|'.join([cert for cert in movie.get('certificates', []) if isinstance(cert, str)]),
        "Runtime_Minutes": movie.get('runtimes', [''])[0] if movie.get('runtimes') else '',
        "Countries": '|'.join(movie.get('countries', [])),
        "Languages": '|'.join(movie.get('languages', [])),
        "Color_Info": '|'.join(movie.get('color info', [])) if isinstance(movie.get('color info', []), list) else movie.get('color info', ''),
        "Aspect_Ratio": movie.get('aspect ratio', ''),
        "Sound_Mix": '|'.join(movie.get('sound mix', [])) if isinstance(movie.get('sound mix', []), list) else movie.get('sound mix', ''),
        "Directors": '|'.join([d.get('name', '') for d in movie.get('director', [])]),
        "Writers": '|'.join([w.get('name', '') for w in movie.get('writer', []) if 'name' in w]),
        "Producers": '|'.join([p.get('name', '') for p in movie.get('producer', []) if 'name' in p]),
        "Composers": '|'.join([c.get('name', '') for c in movie.get('composer', []) if 'name' in c]),
        "Cinematographers": '|'.join([c.get('name', '') for c in movie.get('cinematographer', []) if 'name' in c]),
        "Cast": '|'.join([a.get('name', '') for a in movie.get('cast', [])[:5]]),
        "Plot_Outline": movie.get('plot outline', ''),
        "Plot": '|'.join([p.split('::')[0].strip() for p in movie.get('plot', [])[:1]]) if movie.get('plot') else '',
        "Keywords": '|'.join(movie.get('keywords', [])[:20]),
        "Taglines": '|'.join(movie.get('taglines', [])[:3]) if isinstance(movie.get('taglines', []), list) else '',
        "Box_Office": movie.get('box office', {}).get('Budget', '') if isinstance(movie.get('box office', {}), dict) else '',
        "Production_Companies": '|'.join([str(c) for c in movie.get('production companies', [])]) if movie.get('production companies') else '',
        "Alternative_Titles": '|'.join([str(a) for a in movie.get('akas', [])[:5]]) if movie.get('akas') else '',
    }
    features["Poster_URL"] = movie.get('full-size cover url', movie.get('cover url', ''))
    return features


def find_movie_by_imdb_id(imdb_id):
    if not imdb_id.startswith('tt'):
        imdb_id = f"tt{imdb_id}"
    url = f"https://api.themoviedb.org/3/find/{imdb_id}"
    params = {"api_key": TMDB_API_KEY, "external_source": "imdb_id", "language": "en-US"}
    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            data = response.json()
            if data["movie_results"]:
                return data["movie_results"][0]["id"]
            print(f"No TMDB movie found for IMDb ID {imdb_id}")
            return None
        print(f"API request failed: {response.status_code}")
        return None
    except Exception as e:
        print(f"Error finding movie: {e}")
        return None


def get_tmdb_movie_details(tmdb_id):
    url = f"https://api.themoviedb.org/3/movie/{tmdb_id}"
    params = {"api_key": TMDB_API_KEY, "language": "en-US", "append_to_response": "credits,keywords,videos,release_dates"}
    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        print(f"Failed to get TMDB movie details: {response.status_code}")
        return None
    except Exception as e:
        print(f"Error getting TMDB movie details: {e}")
        return None


def get_movie_images(tmdb_id):
    url = f"https://api.themoviedb.org/3/movie/{tmdb_id}/images"
    params = {"api_key": TMDB_API_KEY, "include_image_language": "en,null"}
    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            return response.json()
        print(f"Failed to get movie images: {response.status_code}")
        return None
    except Exception as e:
        print(f"Error getting movie images: {e}")
        return None


def extract_tmdb_features(tmdb_movie):
    features = {}
    if not tmdb_movie:
        return features
    features.update({
        "TMDB_ID": tmdb_movie.get("id"),
        "TMDB_Original_Title": tmdb_movie.get("original_title"),
        "TMDB_Title": tmdb_movie.get("title"),
        "TMDB_Tagline": tmdb_movie.get("tagline"),
        "TMDB_Overview": tmdb_movie.get("overview"),
        "TMDB_Release_Date": tmdb_movie.get("release_date"),
        "TMDB_Runtime": tmdb_movie.get("runtime"),
        "TMDB_Status": tmdb_movie.get("status"),
        "TMDB_Vote_Average": tmdb_movie.get("vote_average"),
        "TMDB_Vote_Count": tmdb_movie.get("vote_count"),
        "TMDB_Popularity": tmdb_movie.get("popularity"),
        "TMDB_Genres": '|'.join([g["name"] for g in tmdb_movie.get("genres", [])]),
        "TMDB_Original_Language": tmdb_movie.get("original_language"),
        "TMDB_Spoken_Languages": '|'.join([l["name"] for l in tmdb_movie.get("spoken_languages", [])]),
        "TMDB_Production_Countries": '|'.join([c["name"] for c in tmdb_movie.get("production_countries", [])]),
        "TMDB_Production_Companies": '|'.join([c["name"] for c in tmdb_movie.get("production_companies", [])]),
        "TMDB_Budget": tmdb_movie.get("budget"),
        "TMDB_Revenue": tmdb_movie.get("revenue"),
        "TMDB_Poster_Path": tmdb_movie.get("poster_path"),
        "TMDB_Backdrop_Path": tmdb_movie.get("backdrop_path"),
        "TMDB_Poster_URL": f"https://image.tmdb.org/t/p/original{tmdb_movie.get('poster_path')}" if tmdb_movie.get('poster_path') else "",
        "TMDB_Backdrop_URL": f"https://image.tmdb.org/t/p/original{tmdb_movie.get('backdrop_path')}" if tmdb_movie.get('backdrop_path') else "",
    })
    if "credits" in tmdb_movie:
        cast = [f"{a.get('name')} ({a.get('character')})" for a in tmdb_movie['credits'].get('cast', [])[:10]]
        features['TMDB_Cast'] = '|'.join(cast)
        crew_by_job = {}
        for crew in tmdb_movie['credits'].get('crew', []):
            job = crew.get('job')
            if job in ["Director","Producer","Writer","Screenplay","Director of Photography","Original Music Composer"]:
                crew_by_job.setdefault(job, []).append(crew.get('name'))
        if 'Director' in crew_by_job:
            features['TMDB_Directors'] = '|'.join(crew_by_job['Director'])
        writers = []
        for job in ['Writer','Screenplay']:
            writers.extend(crew_by_job.get(job, []))
        if writers:
            features['TMDB_Writers'] = '|'.join(writers)
        if 'Producer' in crew_by_job:
            features['TMDB_Producers'] = '|'.join(crew_by_job['Producer'])
        if 'Original Music Composer' in crew_by_job:
            features['TMDB_Music'] = '|'.join(crew_by_job['Original Music Composer'])
        if 'Director of Photography' in crew_by_job:
            features['TMDB_Cinematography'] = '|'.join(crew_by_job['Director of Photography'])
    if 'keywords' in tmdb_movie and 'keywords' in tmdb_movie['keywords']:
        features['TMDB_Keywords'] = '|'.join([k['name'] for k in tmdb_movie['keywords']['keywords'][:20]])
    if 'videos' in tmdb_movie and 'results' in tmdb_movie['videos']:
        trailers = [f"https://www.youtube.com/watch?v={v.get('key')}" for v in tmdb_movie['videos']['results'] if v.get('type')=='Trailer' and v.get('site')=='YouTube']
        if trailers:
            features['TMDB_Trailers'] = '|'.join(trailers[:3])
    return features


def download_image(url, save_path):
    if os.path.exists(save_path):
        print(f"  - Image already exists: {save_path}")
        return True
    try:
        response = requests.get(url, timeout=15)
        if response.status_code == 200:
            with open(save_path, 'wb') as f:
                f.write(response.content)
            try:
                img = Image.open(BytesIO(response.content))
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                max_dim = 1200
                w,h = img.size
                if w>max_dim or h>max_dim:
                    if w>h:
                        new_w = max_dim
                        new_h = int(h*(max_dim/w))
                    else:
                        new_h = max_dim
                        new_w = int(w*(max_dim/h))
                    img = img.resize((new_w,new_h), Image.LANCZOS)
                img.save(save_path, 'JPEG', quality=95, optimize=True)
            except Exception as e:
                print(f"  - Error processing image: {e}")
            return True
        print(f"  - Download failed, HTTP status code: {response.status_code}")
        return False
    except Exception as e:
        print(f"  - Error downloading image: {e}")
        return False


def download_movie_images(rank, title, imdb_poster_url, tmdb_backdrops):
    movie_dir = os.path.join("movie_images", f"{rank:03d}_{clean_filename(title)}")
    os.makedirs(movie_dir, exist_ok=True)
    downloaded = []
    if imdb_poster_url:
        imdb_path = os.path.join(movie_dir, 'imdb_poster.jpg')
        if download_image(imdb_poster_url, imdb_path):
            downloaded.append(('IMDb Poster', imdb_path))
    for i,backdrop in enumerate(tmdb_backdrops[:6],1):
        url = f"https://image.tmdb.org/t/p/original{backdrop['file_path']}"
        path = os.path.join(movie_dir, f"backdrop_{i}.jpg")
        if download_image(url, path):
            downloaded.append((f'Backdrop #{i}', path))
    return downloaded


def clean_filename(name):
    invalid = '<>:"/\\|?*'
    for c in invalid:
        name = name.replace(c, '_')
    return name


def process_movie_by_id(movie_id, rank):
    try:
        if movie_id in PROCESSED_MOVIE_IDS:
            print(f"\nSkipping already processed movie #{rank}: ID {movie_id}")
            return None
        print(f"\nProcessing #{rank}: Movie ID {movie_id}")
        imdb_movie = get_movie_details(movie_id=movie_id)
        if not imdb_movie:
            print(f"Failed to fetch details for IMDb ID {movie_id}, skipping")
            return None
        print(f"Movie: {imdb_movie.get('title')} ({imdb_movie.get('year')})")
        imdb_features = extract_imdb_features(imdb_movie, rank)
        tmdb_id = find_movie_by_imdb_id(imdb_movie.get('imdbID',''))
        if not tmdb_id:
            print(f"No TMDB match for IMDb ID {imdb_movie.get('imdbID','')}, using IMDb data only")
            PROCESSED_MOVIE_IDS.add(movie_id)
            save_processed_records()
            return imdb_features
        tmdb_movie = get_tmdb_movie_details(tmdb_id)
        if not tmdb_movie:
            print(f"Failed to fetch TMDB details for TMDB ID {tmdb_id}, using IMDb data only")
            PROCESSED_MOVIE_IDS.add(movie_id)
            save_processed_records()
            return imdb_features
        tmdb_features = extract_tmdb_features(tmdb_movie)
        images = get_movie_images(tmdb_id)
        features = {**imdb_features, **tmdb_features}
        if images and 'backdrops' in images:
            backdrops = images['backdrops']
            downloaded = download_movie_images(rank, imdb_features['Title'], imdb_features['Poster_URL'], backdrops)
            features['Downloaded_Images'] = len(downloaded)
            print(f"Downloaded {len(downloaded)} images")
        else:
            downloaded = download_movie_images(rank, imdb_features['Title'], imdb_features['Poster_URL'], [])
            features['Downloaded_Images'] = len(downloaded)
            print(f"Downloaded only {len(downloaded)} IMDb poster(s)")
        PROCESSED_MOVIE_IDS.add(movie_id)
        save_processed_records()
        return features
    except Exception as e:
        print(f"Error processing movie ID {movie_id}: {e}")
        traceback.print_exc()
        return None


def process_all_movies():
    os.makedirs("movie_images", exist_ok=True)
    load_processed_records()
    existing_info = []
    if os.path.exists("top_movies.csv"):
        try:
            df = pd.read_csv("top_movies.csv")
            existing_info = df.to_dict('records')
            print(f"Loaded {len(existing_info)} existing movie records")
        except Exception as e:
            print(f"Error loading existing CSV: {e}")
    all_info = existing_info.copy()
    print(f"\nStarting to process {len(TOP_MOVIE_IDS)} movies...")
    for rank, movie_id in enumerate(tqdm(TOP_MOVIE_IDS, desc="Processing movies"),1):
        if movie_id in PROCESSED_MOVIE_IDS:
            found = False
            for m in existing_info:
                if str(m.get('IMDb_ID','')).replace('tt','') == movie_id:
                    found = True
                    break
            if not found:
                print(f"Movie ID {movie_id} marked processed but not in existing data")
        else:
            feats = process_movie_by_id(movie_id, rank)
            if feats:
                all_info.append(feats)
        if rank % 5 == 0 or rank == len(TOP_MOVIE_IDS):
            if all_info:
                save_to_csv(all_info, f"movies_checkpoint_{rank}.csv")
                print(f"Checkpoint saved at {rank}/{len(TOP_MOVIE_IDS)} movies")
        time.sleep(1)
    return all_info


def save_to_csv(movies_info, filename="top_movies.csv"):
    try:
        df = pd.DataFrame(movies_info)
        df.to_csv(filename, index=False, encoding="utf-8")
        print(f"Saved {len(movies_info)} records to {filename}")
        json_fname = filename.replace('.csv','.json')
        with open(json_fname,'w',encoding='utf-8') as f:
            json.dump(movies_info, f, ensure_ascii=False, indent=2)
        print(f"Saved JSON data to {json_fname}")
    except Exception as e:
        print(f"Error saving data files: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    print("=====================================================")
    print("    IMDb + TMDB Movie Data Collection and Image Download Tool    ")
    print("=====================================================")
    try:
        all_movies = process_all_movies()
        if all_movies:
            save_to_csv(all_movies, "top_movies.csv")
            print("\nFinished! Generated the following:")
            print("- top_movies.csv: CSV with movie details")
            print("- top_movies.json: JSON with complete movie data")
            print("- movie_images/: directory with all posters and backdrops")
        else:
            print("No movie data retrieved. Exiting.")
    except Exception as e:
        print(f"An error occurred during execution: {e}")
        traceback.print_exc()